#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (rgba8, binding = 0) uniform image2D outWeatherTex;


// =====================================================================================
// COMMON
float random2D( in vec2 st ) 
{
    return fract( sin(dot( st.xy, vec2(12.9898,78.233 ) ) ) * 43758.5453123);
}

// =====================================================================================
// PERLIN NOISE SPECIFIC

uniform float perlinAmplitude = 0.5;
uniform float perlinFrecuency = 0.5;
uniform float perlinScale = 64.0;
uniform int perlinOctaves = 1;

float noiseInterpolation(in vec2 i_coord, in float i_size)
{
	vec2 grid = i_coord * i_size;
    
    vec2 randomInput = floor( grid );
    vec2 weights     = fract( grid );
    
    
    float p0 = random2D( randomInput );
    float p1 = random2D( randomInput + vec2( 1.0, 0.0  ) );
    float p2 = random2D( randomInput + vec2( 0.0, 1.0 ) );
    float p3 = random2D( randomInput + vec2( 1.0, 1.0 ) );
    
    weights = smoothstep( vec2( 0.0, 0.0 ), vec2( 1.0, 1.0 ), weights ); 
    
    return p0 +
           ( p1 - p0 ) * ( weights.x ) +
           ( p2 - p0 ) * ( weights.y ) * ( 1.0 - weights.x ) +
           ( p3 - p1 ) * ( weights.y * weights.x );    
}

float perlinNoise(vec2 uv)
{
    float noiseValue = 0.0;
    
    float localAplitude  = perlinAmplitude;
    float localFrecuency = perlinFrecuency;

    for( int index = 0; index < perlinOctaves; index++ )
    {
     	       
        noiseValue += noiseInterpolation( uv, perlinScale * localFrecuency ) * localAplitude;
    
        localAplitude   *= 0.25;
        localFrecuency  *= 3.0;
    }    

	//noiseValue = clamp(noiseValue, 0.0, 1.0);
	//noiseValue = noiseValue * 0.5 + 0.5;
	//noiseValue -= 0.5;
	//noiseValue = clamp(noiseValue, 0.0, 1.0); 
	//noiseValue /= 0.5;
	//noiseValue = noiseValue < 0.2? 0.0 : noiseValue - 0.2;
	return noiseValue * noiseValue;
}

// =====================================================================================


void main()
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	
	vec2 uv = vec2(float(pixel.x) / 1024.0, float(pixel.y) / 1024.0);
	vec2 suv = vec2(uv.x + 5.5, uv.y + 5.5);

	vec4 weather = vec4(perlinNoise(uv) * 1.0, perlinNoise(suv) * 1.0, 0, 1);

	imageStore (outWeatherTex, pixel, weather);
}