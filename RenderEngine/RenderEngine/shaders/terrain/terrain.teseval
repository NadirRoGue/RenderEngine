#version 410 core

layout(triangles, equal_spacing, ccw) in;

// INPUT
layout (location=0) in vec2 inUV[];

// OUTPUT
layout (location=0) out vec2 outUV;
layout (location=1) out float height;

//uniform sampler2D noise;

uniform mat4 modelView;
uniform mat4 modelViewProj;

// ============================================================================

uniform float amplitude = 0.5;
uniform float frecuency = 1.0;
uniform float scale = 1.0;
uniform float octaves = 8;

float Random2D(in vec2 st)
{
	return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

float NoiseInterpolation(in vec2 i_coord, in float i_size)
{
	vec2 grid = i_coord * i_size;

	vec2 randomInput = floor(grid);
	vec2 weights = fract(grid);


	float p0 = Random2D(randomInput);
	float p1 = Random2D(randomInput + vec2(1.0, 0.0));
	float p2 = Random2D(randomInput + vec2(0.0, 1.0));
	float p3 = Random2D(randomInput + vec2(1.0, 1.0));

	weights = smoothstep(vec2(0.0, 0.0), vec2(1.0, 1.0), weights);

	return p0 +
		(p1 - p0) * (weights.x) +
		(p2 - p0) * (weights.y) * (1.0 - weights.x) +
		(p3 - p1) * (weights.y * weights.x);
}

float noiseHeight(in vec2 pos)
{

	float noiseValue = 0.0;

	float localAplitude = amplitude;
	float localFrecuency = frecuency;

	for (int index = 0; index < octaves; index++)
	{

		noiseValue += NoiseInterpolation(pos, scale * localFrecuency) * localAplitude;

		localAplitude /= 2.0;
		localFrecuency *= 2.0;
	}

	return noiseValue;
	//noiseValue = noiseValue;// * 0.5 + 0.5;
}

//=======================================================================

void main()
{
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	outUV = inUV[0] * w + inUV[1] * u + inUV[2] * v;
	
	vec3 a = gl_in[0].gl_Position.xyz;
	vec3 b = gl_in[1].gl_Position.xyz;
	vec3 c = gl_in[2].gl_Position.xyz;

	vec3 p0 = a * w;
	vec3 p1 = b * u;
	vec3 p2 = c * v;

	vec3 final = p0 + p1 + p2;
	
	height = noiseHeight(outUV);

	final.y = height * 1.5;
	gl_Position = vec4(final, 1);
}
