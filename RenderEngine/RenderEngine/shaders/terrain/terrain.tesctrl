#version 410 core

layout( vertices=3 ) out; 

// INPUT
layout (location=0) in vec2 inUV[];

// OUTPUT
layout (location=0) out vec2 outUV[];

uniform mat4 modelView;

uniform float worldScale;

void main()
{
	outUV[gl_InvocationID] = inUV[gl_InvocationID];
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

	// AUTOLOD
	if(gl_InvocationID == 0)
	{
		vec3 a = (modelView * gl_in[0].gl_Position).xyz;
		vec3 b = (modelView * gl_in[1].gl_Position).xyz;
		vec3 c = (modelView * gl_in[2].gl_Position).xyz;

		float la = length(a) * 0.15;
		//la *= la;
		float lb = length(b) * 0.15;
		//lb *= lb;
		float lc = length(c) * 0.15;
		//lc *= lc;

		float closer = la < lb && la < lc ? la : lb < lc ? lb : lc;
		
		closer = max(closer, 1.0);

		// Apply the LOD factor based on the 2 vertices of each edge, this way
		// we avoid having cracks between different patches, because they both
		// will have the same tessellation levels

		float lod0Factor = (la * lc) * (2.0 / worldScale);
		lod0Factor = max(lod0Factor, 1.0);

		float lod1Factor = (la * lb) * (2.0 / worldScale);
		lod1Factor = max(lod1Factor, 1.0);

		float lod2Factor = (lb * lc) * (2.0 / worldScale);
		lod2Factor = max(lod2Factor, 1.0);

		float ilodFactor = (closer * closer) * (2.0 / worldScale);
		ilodFactor = max(ilodFactor, 1.0);

		float LOD0 = max(floor(400.0 / lod0Factor), worldScale);
		float LOD1 = max(floor(400.0 / lod1Factor), worldScale);
		float LOD2 = max(floor(400.0 / lod2Factor), worldScale);
		float ILOD = max(floor(400.0 / ilodFactor), worldScale);

		// 0 : a - c
		// 1 : a - b
		// 2 : b - c

		gl_TessLevelOuter[0] = LOD0;
		gl_TessLevelOuter[1] = LOD1;
		gl_TessLevelOuter[2] = LOD2;
		gl_TessLevelInner[0] = ILOD;
	}
}